---
import { getCollection } from "astro:content";
import Card from "./Card.astro";

interface Props {
  collection: 'posts' | 'projects';
  title: string;
  count?: number;
  viewAllLink?: string;
}

const { collection, title, count = 3, viewAllLink } = Astro.props;

// Fetch collection items
const items = await getCollection(collection);

// Sort by date (newest first) and take requested count
const recentItems = items
  .filter(item => item.data.date)
  .sort((a, b) => {
    const dateA = a.data.date instanceof Date ? a.data.date : new Date(a.data.date);
    const dateB = b.data.date instanceof Date ? b.data.date : new Date(b.data.date);
    return dateB.getTime() - dateA.getTime();
  })
  .slice(0, count);

// Determine link text based on collection type
const linkText = collection === 'posts' ? 'Read more' : 'View project';
---

<div class="recent-content-section">
  <div class="section-header">
    <h2>{title}</h2>
    {viewAllLink && <a href={viewAllLink} class="nav-link">View all</a>}
  </div>

  {recentItems.length > 0 ? (
    <div class="card-grid">
      {recentItems.map((item) => (
        <Card
          title={item.data.title}
          image={item.data.image}
          excerpt={item.data.excerpt}
          tags={item.data.tags}
          link={`/${collection}/${item.slug}`}
          linkText={linkText}
          type={collection === 'posts' ? 'post' : 'project'}
        />
      ))}
    </div>
  ) : (
    <p>No {collection} available yet!</p>
  )}
</div>

<style lang="scss">
  @use "../styles/variables" as *;
  
  .recent-content-section {
    margin: 3em 0;
  }
  
  .section-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2em;

    h2 {
      margin: 0;
    }
  }
  
  // Grid styles are now imported from grid.scss
</style>

<script>
  // This script has been modified to allow partial rows
  function adjustGridItems() {
    const grids = document.querySelectorAll('.card-grid, .posts-grid, .projects-grid');
    
    grids.forEach(grid => {
      // Get all cards and make them visible
      const cards = Array.from(grid.children);
      cards.forEach(card => {
        card.style.display = '';
      });
      
      // No longer hiding cards that would create incomplete rows
      // This allows displaying any number of items, even if they don't fill a complete row
    });
  }

  // Run on load and resize
  window.addEventListener('load', adjustGridItems);
  window.addEventListener('resize', adjustGridItems);
</script>
