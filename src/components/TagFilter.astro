---
interface Props {
  tags: string[];
  selectedTags: string[];
}

const { tags, selectedTags } = Astro.props;
---

<div class="tag-filter">
  {tags.map((tag: string) => (
    <button
      class:list={[
        'tag-button',
        { active: selectedTags.includes(tag) }
      ]}
      data-tag={tag}
    >
      {tag}
    </button>
  ))}
</div>

<style lang="scss">
  @use '../styles/variables' as *;

  .tag-filter {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5em;
    margin: 2em 0;
  }

  .tag-button {
    padding: 0.3em 0.8em;
    border: 1px solid $purple;
    background: transparent;
    color: $purple;
    cursor: pointer;
    font-family: 'Inconsolata', monospace;
    font-size: 0.9em;
    transition: all 0.2s ease;

    &:hover {
      background: rgba($purple, 0.1);
    }

    &.active {
      background: $purple;
      color: $white;
    }
    
    // Light mode adjustments
    :global(html.light-mode) & {
      border-color: var(--link-color);
      color: var(--link-color);
      
      &:hover {
        background: rgba(var(--link-color), 0.1);
      }
      
      &.active {
        background: var(--link-color);
        color: $white;
      }
    }
  }
</style>

<script>
  // Get all tag buttons and card elements
  const buttons = document.querySelectorAll('.tag-button');
  const cards = document.querySelectorAll('[data-card], [data-post]');
  let selectedTags = [];

  // Function to update card visibility based on selected tags
  const updateVisibility = () => {
    cards.forEach((card) => {
      const cardTags = (card.dataset.tags || '').split(',').filter(Boolean);
      // Show card if no tags selected OR if card has ALL selected tags
      const shouldShow = selectedTags.length === 0 || 
        selectedTags.every((tag) => cardTags.includes(tag));
      
      card.classList.toggle('hidden', !shouldShow);
    });
  };

  // Set up click event for each tag button
  buttons.forEach((button) => {
    button.addEventListener('click', () => {
      const tag = button.dataset.tag;
      if (!tag) return;
      
      if (selectedTags.includes(tag)) {
        // Remove tag if already selected
        selectedTags = selectedTags.filter((t) => t !== tag);
        button.classList.remove('active');
      } else {
        // Add tag if not yet selected
        selectedTags.push(tag);
        button.classList.add('active');
      }

      // Update card visibility
      updateVisibility();
      
      // Update URL query parameters (optional)
      const url = new URL(window.location.href);
      if (selectedTags.length > 0) {
        url.searchParams.set('tags', selectedTags.join(','));
      } else {
        url.searchParams.delete('tags');
      }
      history.replaceState({}, '', url);
    });
  });

  // Initialize based on URL params when page loads
  document.addEventListener('DOMContentLoaded', () => {
    const url = new URL(window.location.href);
    const tagsParam = url.searchParams.get('tags');
    if (tagsParam) {
      const urlTags = tagsParam.split(',').filter(Boolean);
      selectedTags = urlTags;
      
      // Update button states
      buttons.forEach((button) => {
        const tag = button.dataset.tag;
        if (tag && urlTags.includes(tag)) {
          button.classList.add('active');
        }
      });
      
      // Update visibility
      updateVisibility();
    }
  });
</script>
